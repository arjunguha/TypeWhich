tools:
  # The order in which tools appear affects the order in which we generate
  # LaTeX summary tables.
  - title: Gtubi
    command: [ "./bin/gtubi" ]
  - title: InsAndOuts
    command: [ "./bin/TypeWhich", "migrate", "--ins-and-outs", "--skip-type-check" ]
  - title: MGT
    command: [ "./bin/mgt" ]
  - title: MaxMigrate
    command: [ "./bin/MaxMigrate" ]
  - title: TypeWhich2
    command: [ "./bin/TypeWhich", "migrate" ]
  - title: TypeWhich
    command: [ "./bin/TypeWhich", "migrate", "--precise" ]

benchmarks:
  - file: adversarial/01-farg-mismatch.gtlc
  - file: adversarial/02-rank2-poly-id.gtlc
    # Improved i:any to i:any -> any. But, i is always applied, so this is
    # compatible.
    assert_compatible: |
      (fun i:any -> any. (fun a:any. i true) (i 5)) (fun x:any. x)
  - file: adversarial/03-unreachable-error.gtlc
    # This is an improved type. But, the program always crashes.
    assert_compatible: |
      (fun b:(any -> any) -> (any -> int) -> any -> int.
         b (fun c:any.  (fun x:int. x x) 5 5) (fun d:any. 0)) 
      (fun t:any -> any. fun f:any -> int. f)
  - file: adversarial/04-f-in-f-out.gtlc
    # this is obviously an improved type
    assert_compatible: |
      (fun f:int -> int. (fun y:int. f) (f 5)) (fun x:int. 10 + x)
  - file: adversarial/05-order3-fun.gtlc
    context: |
      (HOLE) (fun a . a) (fun b . true)
    assert_compatible: |
      fun f:(any -> any) -> any. fun x:any -> any. x (f x)    
    results:
      MaxMigrate:
        assert_unusable: true
  - file: adversarial/06-order3-intfun.gtlc
    context: |
      (HOLE) (fun a . fun b . true) (fun c . 0)
    assert_compatible: |
      fun f : (int -> int) -> (int -> any) . 
        fun g : int -> int. (f g) ((g 10) + 1)
  - file: adversarial/07-double-f.gtlc
    context: |
      (HOLE) (fun x . fun y . y)
  - file: adversarial/08-outflows.gtlc
  - file: adversarial/09-precision-relation.gtlc
    assert_compatible: |
      (fun f:any -> int. f true + (fun g:int -> int. g 5) f) (fun x:any. 5)
  - file: adversarial/10-if-tag.gtlc
    context: |
      (HOLE) true 1
  - file: migeed/01_apply_add.gtlc
  - file: migeed/02_add_applied.gtlc
    assert_compatible: |
      fun x : any -> int . x (x true + 1)
    context: |
      (HOLE) (fun y . 1)
  - file: migeed/03_add_two_applies.gtlc
    assert_compatible: |
      fun x:any -> int. x 4 + x true
    context: |
      (HOLE) (fun y . 1)
  - file: migeed/04_identity_four.gtlc
    assert_compatible: |
      (fun x:int. x) 4
  - file: migeed/05_succ_id_id.gtlc
  - file: migeed/06_identity.gtlc
    context: |
      (HOLE) (fun y . y)
  - file: migeed/07_apply2.gtlc
    assert_compatible: |
      fun x:any. fun y:any -> any -> any. y x x
    context: |
      (HOLE) 1 (fun z1 . fun z2 . 1)
    results:
      MaxMigrate:
        # The migration produced is "unusable" -- no way to apply it.
        assert_unusable: true
        migration: "fun x : any . fun y : int -> bool -> int . y x x\n"
  - file: migeed/08_indirect_apply_self.gtlc
    assert_compatible: |
      fun x:any -> any. (fun y:any -> any. x) x x
    results:
      MaxMigrate:
        assert_unusable: true
    context: |
      (HOLE) (fun z : any . z)
  - file: migeed/09_the_long_one.gtlc
    context: |
      (HOLE) true 1
    assert_compatible: |
      fun x:any. (fun f:any -> int. (fun xx:any -> int. fun y:int. xx) f (f x))  (fun z:any. 1)
  - file: migeed/10_apply_self.gtlc
    assert_compatible: |
      fun x:any -> any. x x
  - file: migeed/11_untypable_in_sys_f.gtlc
    assert_compatible: |
      (fun x:(any -> any) -> any. 
        fun y:any -> any -> any. 
          y (x (fun x:any. x)) 
            (x (fun b:any. fun c:any. b)))
      (fun d:any -> any. d d)      
  - file: migeed/12_self_interpreter.gtlc    
    assert_compatible: |
      (fun h:any -> any -> any .
        (fun x:any -> any. h (x x)) 
        (fun x:any. h x x))
      (fun e:any .
        fun m:any .
          m (fun x:any . x) 
            (fun m:any . fun n:any . e m (e n)) 
            (fun m:any . fun v:any. e (m v)))